version: "3.8"

services:
  postgres:
    image: postgres:latest
    container_name: ${DB_HOST}
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 1s
      retries: 10
      timeout: 1s

  pgadmin:
    image: dpage/pgadmin4
    container_name: ${PGADMIN_HOST}
    restart: always
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres

  auth-service:
    container_name: ${AUTH_SERVICE_HOST}
    build:
      dockerfile: backend/${AUTH_SERVICE_FOLDER}/Dockerfile
      context: .
      args:
        AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
        AUTH_SERVICE_FOLDER: ${AUTH_SERVICE_FOLDER}
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  db-service:
    container_name: ${DB_SERVICE_HOST}
    build:
      dockerfile: backend/${DB_SERVICE_FOLDER}/Dockerfile
      context: .
      args:
        DB_SERVICE_HOST: ${DB_SERVICE_HOST}
    ports:
      - "${DB_SERVICE_PORT}:${DB_SERVICE_PORT}"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  diagnostics-service:
    container_name: ${DIAGNOSTICS_SERVICE_HOST}
    build: ./backend/${DIAGNOSTICS_SERVICE_FOLDER}
    ports:
      - "${DIAGNOSTICS_SERVICE_PORT}:${DIAGNOSTICS_SERVICE_PORT}"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    environment:
      - AUTH_SERVICE_HOST=${AUTH_SERVICE_HOST}
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT}
      - AUTH_SERVICE_UPSTREAM=${AUTH_SERVICE_UPSTREAM}
      - AUTH_SERVICE_PATH=${AUTH_SERVICE_PATH}
      - AUTH_PROXY_LOCATION=${AUTH_PROXY_LOCATION}
      - DB_SERVICE_HOST=${DB_SERVICE_HOST}
      - DB_SERVICE_PORT=${DB_SERVICE_PORT}
      - DB_SERVICE_UPSTREAM=${DB_SERVICE_UPSTREAM}
      - DB_SERVICE_PATH=${DB_SERVICE_PATH}
      - DIAGNOSTICS_SERVICE_HOST=${DIAGNOSTICS_SERVICE_HOST}
      - DIAGNOSTICS_SERVICE_PORT=${DIAGNOSTICS_SERVICE_PORT}
      - DIAGNOSTICS_SERVICE_UPSTREAM=${DIAGNOSTICS_SERVICE_UPSTREAM}
      - DIAGNOSTICS_SERVICE_PATH=${DIAGNOSTICS_SERVICE_PATH}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf.template:ro
      - ./nginx/prepare.sh:/usr/local/bin/prepare.sh:rw
    entrypoint: /bin/bash -c "chmod +x /usr/local/bin/prepare.sh && /usr/local/bin/prepare.sh && exec nginx -g 'daemon off;'"
    depends_on:
      postgres:
        condition: service_healthy
      pgadmin:
        condition: service_started
      auth-service:
        condition: service_started
      db-service:
        condition: service_started
      diagnostics-service:
        condition: service_started

volumes:
  sqlite_data:
