# TODO: Improve what proxy_set_header will send to the upstream service. Double check the info and if that is enough for proper logging.
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout 65;

    # Request ID
    map $http_x_request_id $validated_request_id {
        default "$pid$remote_addr$msec$connection";
        "~^[a-zA-Z0-9\-_]{1,36}$" $http_x_request_id;
    }

    # Upstreams
    upstream auth_service {
        server ${AUTH_SERVICE_HOST}:${AUTH_SERVICE_PORT};
    }

    upstream db_service {
        server ${DB_SERVICE_HOST}:${DB_SERVICE_PORT};
    }

    upstream diagnostics_service {
        server ${DIAGNOSTICS_SERVICE_HOST}:${DIAGNOSTICS_SERVICE_PORT};
    }

    log_format json '{"timestamp":"$time_iso8601",'
                  '"request_id":"$validated_request_id",'
                  '"method":"$request_method",'
                  '"uri":"$request_uri",'
                  '"status":"$status",'
                  '"response_time":"$request_time",'
                  '"upstream_time":"$upstream_response_time",'
                  '"remote_addr":"$remote_addr",'
                  '"user_agent":"$http_user_agent"}';

    access_log /var/log/nginx/access.log json;
    error_log  /var/log/nginx/error.log debug;

    server {
        listen 80;

        # Request Timestamp
        set $current_timestamp $msec;

        # Proxy headers for the auth service
        location /auth/ {
            proxy_pass http://auth_service/;
            proxy_set_header X-Request-Id $request_id;
            proxy_set_header X-Current-Timestamp $current_timestamp;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # We use bearer token for authentication - check if the token is valid
        location = /auth_proxy {
            proxy_pass http://auth_service/core/validate;
            proxy_method POST;
            proxy_set_header Content-Length 0; 
            proxy_set_header X-Request-Id $request_id;
            proxy_set_header X-Current-Timestamp $current_timestamp;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /db/ {
            auth_request /auth_proxy;
            proxy_pass http://db_service/;
            proxy_set_header X-Request-Id $request_id;
            proxy_set_header X-Current-Timestamp $current_timestamp;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /diagnostics/ {
            auth_request /auth_proxy;
            proxy_pass http://diagnostics_service/;
            proxy_set_header X-Request-Id $request_id;
            proxy_set_header X-Current-Timestamp $current_timestamp;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Real-IP $remote_addr;
        }

        error_page 401 403 = @auth_fail;
        location @auth_fail {
            return 403;
        }
    }

}
